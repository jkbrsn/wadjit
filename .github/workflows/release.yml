name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. v0.1.2 or 1.2.3-rc.1)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  GO_VERSION: 1.25.3
  GOLANGCI_LINT_VERSION: v2.5.0

jobs:
  version-bump-check:
    name: Version bump check
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0   # fetch all history (include tags)

      - name: Version bump check
        shell: bash
        run: |
          raw="${{ inputs.version }}"
          NEW_VERSION="${raw#v}"  # normalized

          # basic semver check: X.Y.Z with optional prerelease/build
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+(\.[0-9]+){2}([\-+][0-9A-Za-z\.-]+)?$ ]]; then
            echo "::error::Input must be SemVer like 0.1.2 or 1.2.3-rc.1"
            exit 1
          fi

          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          OLD_VERSION="${LATEST_TAG#v}"  # normalized

          echo "Latest tag:    $LATEST_TAG"
          echo "Input version: $NEW_VERSION"

          if [[ "$NEW_VERSION" == "$OLD_VERSION" ]]; then
            echo "::error title=VERSION check::VERSION not bumped (still $NEW_VERSION)"
            exit 1
          fi

          if [[ "$(printf '%s\n' "$OLD_VERSION" "$NEW_VERSION" | sort -V | tail -n1)" != "$OLD_VERSION" ]]; then
            : # OK, NEW_VERSION > OLD_VERSION
          else
            echo "::error::New version ($NEW_VERSION) must be greater than old ($OLD_VERSION)"
            exit 1
          fi

          echo "Version bump OK: $OLD_VERSION â†’ $NEW_VERSION"

  release:
    name: Test, tag & release
    needs: [version-bump-check]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0   # fetch all history (include tags)

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Run tests
        run: go test -mod=readonly ./... -count=1 -race

      - name: Normalize version
        id: ver
        shell: bash
        run: |
          raw="${{ inputs.version }}"
          ver="${raw#v}"
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "tag=v$ver" >> "$GITHUB_OUTPUT"

      - name: Create Git tag
        shell: bash
        run: |
          TAG="${{ steps.ver.outputs.tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "::error::Tag $TAG already exists"
            exit 1
          fi
          git tag -a "$TAG" -m "chore(release): $TAG"
          git push origin "$TAG"

      - name: Generate changelog for the new tag
        id: git-cliff
        uses: orhun/git-cliff-action@v4
        with:
          args: --current --no-exec
        env:
          GITHUB_REPO:  ${{ github.repository }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: wadjit ${{ steps.ver.outputs.tag }}
          body: ${{ steps.git-cliff.outputs.content }}
          prerelease: ${{ inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
